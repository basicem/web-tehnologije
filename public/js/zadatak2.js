let assert = chai.assert;
    describe('TestoviParser', function() {
        describe('dajTacnost()', function(txt) {
            //padaju svi testovi
            it('Treba nam vratiti {"tacnost":0%",”greske":["Tabela crtaj() should draw 3 rows when parameter are 2,3","Tabela crtaj() should draw 2 columns in row 2 when parameter are 2,3"]}', function() {
            let objekat = TestoviParser.dajTacnost("{\"stats\":{\"suites\":2,\"tests\":2,\"passes\":0,\"pending\":0,\"failures\":2,\"start\":\"2021-11-05T15:00:26.343Z\",\"end\":\"2021-11-05T15:00:26.352Z\",\"duration\":9},\"tests\":[{\"title\":\"should draw 3 rows when parameter are 2,3\",\"fullTitle\":\"Tabela crtaj() should draw 3 rows when parameter are 2,3\",\"file\":null,\"duration\":1,\"currentRetry\":0,\"speed\":\"fast\",\"err\":{}},{\"title\":\"should draw 2 columns in row 2 when parameter are 2,3\",\"fullTitle\":\"Tabela crtaj() should draw 2 columns in row 2 when parameter are 2,3\",\"file\":null,\"duration\":0,\"currentRetry\":0,\"speed\":\"fast\",\"err\":{}}],\"pending\":[],\"failures\":[{\"title\":\"should draw 3 rows when parameter are 2,3\",\"fullTitle\":\"Tabela crtaj() should draw 3 rows when parameter are 2,3\",\"file\":null,\"duration\":1,\"currentRetry\":0,\"speed\":\"fast\",\"err\":{}},{\"title\":\"should draw 2 columns in row 2 when parameter are 2,3\",\"fullTitle\":\"Tabela crtaj() should draw 2 columns in row 2 when parameter are 2,3\",\"file\":null,\"duration\":0,\"currentRetry\":0,\"speed\":\"fast\",\"err\":{}}],\"passes\":[]}");
            
            var expect = chai.expect;
            assert.equal(objekat.tacnost, '0%',"Tacnost je 0%");
            expect(objekat.greske).to.have.members(['Tabela crtaj() should draw 3 rows when parameter are 2,3','Tabela crtaj() should draw 2 columns in row 2 when parameter are 2,3']);
            });
            
            //ne mogu se izvrsiti
            it('Treba nam vratiti {"tacnost”:0%","greske":["Testovi se ne mogu izvršiti"]}', function() {
                let objekat = TestoviParser.dajTacnost("{suites\":2,:2,\"start\":\"2021-11-05T15:00:26.343Z\",\"end\":\"2021-11-05T15:00:26.352Z\",\"duration\":9},\"tests\":[{\"title\":\"should draw 3 rows when parameter are 2,3\",\"fullTitle\":\"Tabela crtaj() should draw 3 rows when parameter are 2,3\",\"file\":null,\"duration\":1,\"currentRetry\":0,\"speed\":\"fast\",\"err\":{}},{\"title\":\"should draw 2 columns in row 2 when parameter are 2,3\",\"fullTitle\":\"Tabela crtaj() should draw 2 columns in row 2 when parameter are 2,3\",\"file\":null,\"duration\":0,\"currentRetry\":0,\"speed\":\"fast\",\"err\":{}}],\"pending\":[],\"failures\":[{\"title\":\"should draw 3 rows when parameter are 2,3\",\"fullTitle\":\"Tabela crtaj() should draw 3 rows when parameter are 2,3\",\"file\":null,\"duration\":1,\"currentRetry\":0,\"speed\":\"fast\",\"err\":{}},{\"title\":\"should draw 2 columns in row 2 when parameter are 2,3\",\"fullTitle\":\"Tabela crtaj() should draw 2 columns in row 2 when parameter are 2,3\",\"file\":null,\"duration\":0,\"currentRetry\":0,\"speed\":\"fast\",\"err\":{}}],\"passes\":[]}");
                var expect = chai.expect;
                assert.equal(objekat.tacnost, '0%',"Tacnost je 0%");
                expect(objekat.greske).to.have.members(['Testovi se ne mogu izvršiti']);
            });

            //prolaze svi testovi
            it('Treba nam vratiti {"tacnost":"100%","greske":[]}', function() {
               let objekat = TestoviParser.dajTacnost("{\n  \"stats\": {\n    \"suites\": 2,\n    \"tests\": 2,\n    \"passes\": 2,\n    \"pending\": 0,\n    \"failures\": 0,\n    \"start\": \"2021-11-21T22:21:54.054Z\",\n    \"end\": \"2021-11-21T22:21:54.068Z\",\n    \"duration\": 14\n  },\n  \"tests\": [\n    {\n      \"title\": \"should draw 3 rows when parameter are 2,3\",\n      \"fullTitle\": \"Tabela crtaj() should draw 3 rows when parameter are 2,3\",\n      \"file\": null,\n      \"duration\": 2,\n      \"currentRetry\": 0,\n      \"speed\": \"fast\",\n      \"err\": {}\n    },\n    {\n      \"title\": \"should draw 2 columns in row 2 when parameter are 2,3\",\n      \"fullTitle\": \"Tabela crtaj() should draw 2 columns in row 2 when parameter are 2,3\",\n      \"file\": null,\n      \"duration\": 1,\n      \"currentRetry\": 0,\n      \"speed\": \"fast\",\n      \"err\": {}\n    }\n  ],\n  \"pending\": [],\n  \"failures\": [],\n  \"passes\": [\n    {\n      \"title\": \"should draw 3 rows when parameter are 2,3\",\n      \"fullTitle\": \"Tabela crtaj() should draw 3 rows when parameter are 2,3\",\n      \"file\": null,\n      \"duration\": 2,\n      \"currentRetry\": 0,\n      \"speed\": \"fast\",\n      \"err\": {}\n    },\n    {\n      \"title\": \"should draw 2 columns in row 2 when parameter are 2,3\",\n      \"fullTitle\": \"Tabela crtaj() should draw 2 columns in row 2 when parameter are 2,3\",\n      \"file\": null,\n      \"duration\": 1,\n      \"currentRetry\": 0,\n      \"speed\": \"fast\",\n      \"err\": {}\n    }\n  ]\n}"); 
                var expect = chai.expect;
                assert.equal(objekat.tacnost, '100%',"Tacnost je 100%");
                assert.equal(objekat.greske.length, '0');
            });

            //prolazi samo jedan test
            it('Treba nam vratiti {"tacnost":"50%","greske":["Tabela crtaj() should draw 2 columns in row 2 when parameter are 2,3"]}', function() {
                let objekat = TestoviParser.dajTacnost("{\n  \"stats\": {\n    \"suites\": 2,\n    \"tests\": 2,\n    \"passes\": 1,\n    \"pending\": 0,\n    \"failures\": 1,\n    \"start\": \"2021-11-21T22:40:57.419Z\",\n    \"end\": \"2021-11-21T22:40:57.503Z\",\n    \"duration\": 84\n  },\n  \"tests\": [\n    {\n      \"title\": \"should draw 3 rows when parameter are 2,3\",\n      \"fullTitle\": \"Tabela crtaj() should draw 3 rows when parameter are 2,3\",\n      \"file\": null,\n      \"duration\": 2,\n      \"currentRetry\": 0,\n      \"speed\": \"fast\",\n      \"err\": {}\n    },\n    {\n      \"title\": \"should draw 2 columns in row 2 when parameter are 2,3\",\n      \"fullTitle\": \"Tabela crtaj() should draw 2 columns in row 2 when parameter are 2,3\",\n      \"file\": null,\n      \"duration\": 9,\n      \"currentRetry\": 0,\n      \"err\": {\n        \"message\": \"Broj kolona treba biti 3: expected 2 to equal 3\",\n        \"showDiff\": true,\n        \"actual\": \"2\",\n        \"expected\": \"3\",\n        \"operator\": \"strictEqual\",\n        \"stack\": \"AssertionError: Broj kolona treba biti 3: expected 2 to equal 3\\n    at Context.<anonymous> (test.js:22:20)\"\n      }\n    }\n  ],\n  \"pending\": [],\n  \"failures\": [\n    {\n      \"title\": \"should draw 2 columns in row 2 when parameter are 2,3\",\n      \"fullTitle\": \"Tabela crtaj() should draw 2 columns in row 2 when parameter are 2,3\",\n      \"file\": null,\n      \"duration\": 9,\n      \"currentRetry\": 0,\n      \"err\": {\n        \"message\": \"Broj kolona treba biti 3: expected 2 to equal 3\",\n        \"showDiff\": true,\n        \"actual\": \"2\",\n        \"expected\": \"3\",\n        \"operator\": \"strictEqual\",\n        \"stack\": \"AssertionError: Broj kolona treba biti 3: expected 2 to equal 3\\n    at Context.<anonymous> (test.js:22:20)\"\n      }\n    }\n  ],\n  \"passes\": [\n    {\n      \"title\": \"should draw 3 rows when parameter are 2,3\",\n      \"fullTitle\": \"Tabela crtaj() should draw 3 rows when parameter are 2,3\",\n      \"file\": null,\n      \"duration\": 2,\n      \"currentRetry\": 0,\n      \"speed\": \"fast\",\n      \"err\": {}\n    }\n  ]\n}");
                var expect = chai.expect;
                assert.equal(objekat.tacnost, '50%',"Tacnost je 50%");
                assert.equal(objekat.greske.length, '1');
                expect(objekat.greske).to.have.members(['Tabela crtaj() should draw 2 columns in row 2 when parameter are 2,3']);
            });

            //od tri prolaze dva testa
            it('Treba nam vratiti {"tacnost":"66.7%","greske":["Tabela crtaj() should draw 2 columns in row 2 when parameter are 2,3"]}', function() {
                let objekat = TestoviParser.dajTacnost("{\"stats\":{\"suites\": 2,\"tests\": 3,\"passes\": 2,\"pending\": 0,\"failures\": 1,\"start\": \"2021-11-21T22:59:16.206Z\",\"end\": \"2021-11-21T22:59:16.224Z\",\"duration\": 18},\"tests\": [{\"title\": \"should draw 3 rows when parameter are 2,3\",\"fullTitle\": \"Tabela crtaj() should draw 3 rows when parameter are 2,3\",\"file\": null,\"duration\": 2,\"currentRetry\": 0,\"speed\": \"fast\",\"err\": {}},{\"title\": \"should draw 2 columns in row 2 when parameter are 2,3\",\n      \"fullTitle\": \"Tabela crtaj() should draw 2 columns in row 2 when parameter are 2,3\",\n      \"file\": null,\n      \"duration\": 4,\n      \"currentRetry\": 0,\n      \"err\": {\n        \"message\": \"Broj kolona treba biti 3: expected 2 to equal 3\",\n        \"showDiff\": true,\n        \"actual\": \"2\",\n        \"expected\": \"3\",\n        \"operator\": \"strictEqual\",\n        \"stack\": \"AssertionError: Broj kolona treba biti 3: expected 2 to equal 3\\n    at Context.<anonymous> (test.js:22:20)\"}},{\"title\": \"should draw 2 columns in row 2 when parameter are 3,3\",\n      \"fullTitle\": \"Tabela crtaj() should draw 2 columns in row 2 when parameter are 3,3\",\n      \"file\": null,\n      \"duration\": 1,\n      \"currentRetry\": 0,\n      \"speed\": \"fast\",\n      \"err\": {}\n    }\n  ],\n  \"pending\": [],\n  \"failures\": [\n    {\n      \"title\": \"should draw 2 columns in row 2 when parameter are 2,3\",\n      \"fullTitle\": \"Tabela crtaj() should draw 2 columns in row 2 when parameter are 2,3\",\"file\": null,\"duration\": 4,\"currentRetry\": 0,\"err\": {\"message\": \"Broj kolona treba biti 3: expected 2 to equal 3\",\"showDiff\": true,\"actual\": \"2\",\"expected\": \"3\",\"operator\": \"strictEqual\",\"stack\": \"AssertionError: Broj kolona treba biti 3: expected 2 to equal 3\\n    at Context.<anonymous> (test.js:22:20)\"}}],\"passes\": [{\"title\": \"should draw 3 rows when parameter are 2,3\",\"fullTitle\": \"Tabela crtaj() should draw 3 rows when parameter are 2,3\",\"file\": null,\"duration\": 2,\"currentRetry\": 0,\"speed\": \"fast\",\"err\": {}},{\"title\": \"should draw 2 columns in row 2 when parameter are 3,3\",\"fullTitle\": \"Tabela crtaj() should draw 2 columns in row 2 when parameter are 3,3\",\"file\": null,\"duration\": 1,\"currentRetry\": 0,\"speed\": \"fast\",\"err\": {}}]}");
                var expect = chai.expect;
                assert.equal(objekat.tacnost, '66.7%',"Tacnost je 66.7%");
                assert.equal(objekat.greske.length, '1');
                expect(objekat.greske).to.have.members(['Tabela crtaj() should draw 2 columns in row 2 when parameter are 2,3']);
            });
            //JSON ok ali fali property neki
            it('Treba nam vratiti {"tacnost":"0%","greske":["Testovi se ne mogu izvršiti"]}', function() {
                let objekat = TestoviParser.dajTacnost("{\"stats\":{\"suites\": 2,\"tests\": 3,\"passes\": 2,\"pending\": 0,\"failures\": 1,\"start\": \"2021-11-21T22:59:16.206Z\",\"end\": \"2021-11-21T22:59:16.224Z\",\"duration\": 18},\"pending\": [],\n  \"failures\": [\n    {\n      \"title\": \"should draw 2 columns in row 2 when parameter are 2,3\",\n      \"fullTitle\": \"Tabela crtaj() should draw 2 columns in row 2 when parameter are 2,3\",\"file\": null,\"duration\": 4,\"currentRetry\": 0,\"err\": {\"message\": \"Broj kolona treba biti 3: expected 2 to equal 3\",\"showDiff\": true,\"actual\": \"2\",\"expected\": \"3\",\"operator\": \"strictEqual\",\"stack\": \"AssertionError: Broj kolona treba biti 3: expected 2 to equal 3\\n    at Context.<anonymous> (test.js:22:20)\"}}],\"passes\": [{\"title\": \"should draw 3 rows when parameter are 2,3\",\"fullTitle\": \"Tabela crtaj() should draw 3 rows when parameter are 2,3\",\"file\": null,\"duration\": 2,\"currentRetry\": 0,\"speed\": \"fast\",\"err\": {}},{\"title\": \"should draw 2 columns in row 2 when parameter are 3,3\",\"fullTitle\": \"Tabela crtaj() should draw 2 columns in row 2 when parameter are 3,3\",\"file\": null,\"duration\": 1,\"currentRetry\": 0,\"speed\": \"fast\",\"err\": {}}]}");
                var expect = chai.expect;
                assert.equal(objekat.tacnost, '0%',"Tacnost je 0%");
                assert.equal(objekat.greske.length, '1');
                expect(objekat.greske).to.have.members(['Testovi se ne mogu izvršiti']);
            });
        });
    });
